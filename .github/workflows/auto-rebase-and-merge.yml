name: Secure Auto Rebase and Merge

on:
  pull_request:
    types: [labeled]

permissions:
  pull-requests: write
  contents: write
  checks: read
  repository-projects: read

jobs:
  rebase-and-merge:
    if: github.event.label.name == 'rebase-and-merge'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Security Checks (collaborator, CI —Å—Ç–∞—Ç—É—Å, mergeable)
        id: security-checks
        uses: actions/github-script@v6
        with:
          script: |
            const pullNumber = context.payload.pull_request.number;
            const prUser = context.payload.pull_request.user.login;

            console.log(`[Checks] Fetching collaborators...`);
            const { data: collaborators } = await github.rest.repos.listCollaborators({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –∞–≤—Ç–æ—Ä PR –ø—Ä–∞–≤–∞ push –∏–ª–∏ admin
            const allowedUsers = collaborators
              .filter(user => user.permissions.push || user.permissions.admin)
              .map(user => user.login);

            if (!allowedUsers.includes(prUser)) {
              core.setFailed(`User @${prUser} is not authorized to auto-merge.`);
              return;
            }

            console.log(`[Checks] Checking CI/CD status for PR #${pullNumber}...`);

            // –ü–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –Ω—É–∂–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            const requiredChecks = ['build', 'test'];

            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
            });

            const relevantCheckRuns = checks.check_runs.filter(check =>
              requiredChecks.includes(check.name)
            );

            const failedRequiredCheck = relevantCheckRuns.some(check =>
              check.conclusion === 'failure'
            );
            if (failedRequiredCheck) {
              core.setFailed("Some required checks have failed. Merge is blocked.");
              return;
            }

            const notCompletedCheck = relevantCheckRuns.some(check =>
              check.status !== 'completed'
            );
            
            if (notCompletedCheck) {
              core.setFailed("Some required checks are still running. Please wait.");
              return;
            }

            console.log(`[Checks] All checks passed for PR #${pullNumber}. Ready to rebase and merge!`);

      - name: Automatic Rebase and Push
        uses: cirrus-actions/rebase@1.8
        with:
          autosquash: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for Updated Mergeable Status
        id: merge-check
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const maxAttempts = 5;
            const delayMs = 3000;
            let attempt = 0;
            let pr;
            while (attempt < maxAttempts) {
              pr = (await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
              })).data;

              core.info(`Attempt ${attempt + 1}: mergeable=${pr.mergeable}, mergeable_state=${pr.mergeable_state}`);

              // –ï—Å–ª–∏ mergeable —É–∂–µ –≤—ã—á–∏—Å–ª–µ–Ω–æ (–Ω–µ null) ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
              if (pr.mergeable !== null) break;

              // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
              await new Promise(resolve => setTimeout(resolve, delayMs));
              attempt++;
            }

            if (!pr.mergeable || pr.mergeable_state === "dirty") {
              core.setFailed(`PR #${prNumber} is not mergeable after rebase: mergeable=${pr.mergeable}, mergeable_state=${pr.mergeable_state}`);
            } else {
              core.info(`PR #${prNumber} is mergeable.`);
            }

      - name: Merge PR
        if: steps.merge-check.outcome == 'success'
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            core.info(`Merging PR #${prNumber}...`);
            const response = await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: 'merge'
            });
            if (response.status !== 200) {
              core.setFailed(`Merge failed for PR #${prNumber}: ${response.data.message}`);
            } else {
              core.info(`PR #${prNumber} merged successfully.`);
            }

      - name: Cleanup / Final Comment
        if: ${{ always() }}
        uses: actions/github-script@v6
        with:
          script: |
            const pullNumber = context.payload.pull_request.number;
            const labelName = 'rebase-and-merge';
            const jobStatus = '${{ job.status }}'; // success –∏–ª–∏ failure

            console.log(`[Cleanup] Job finished with status = ${jobStatus}`);

            if (jobStatus === 'success') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pullNumber,
                body: `‚úÖ **GitHub Actions Bot**: Successfully rebased and merged PR #${pullNumber}! üéâ`
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pullNumber,
                body: `‚ö†Ô∏è **GitHub Actions Bot**: Automatic rebase and merge **failed** for PR #${pullNumber}. Please check the logs for details.`
              });

              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pullNumber,
                  name: labelName,
                });
                console.log(`[Cleanup] Label '${labelName}' removed from PR #${pullNumber}.`);
              } catch (err) {
                console.error(`[Cleanup] Failed to remove label: ${err.message}`);
              }
            }
