name: Secure Auto Rebase and Merge

on:
  pull_request:
    types: [labeled]

permissions:
  pull-requests: write
  contents: write
  checks: read  # Чтобы проверять CI/CD статусы
  repository-projects: read  # Чтобы получать список Collaborators

jobs:
  rebase-and-merge:
    name: Secure Rebase and Merge PR
    if: github.event.label.name == 'rebase-and-merge'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Automatic Rebase
        uses: cirrus-actions/rebase@1.8
        with:
          autosquash: false
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Create merge commit with security checks
        uses: actions/github-script@v6
        with:
          script: |
            const pullNumber = context.payload.pull_request.number;
            const prUser = context.payload.pull_request.user.login;
            const labelName = 'rebase-and-merge';

            async function removeLabel() {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pullNumber,
                  name: labelName,
                });
                console.log(`Label '${labelName}' removed from PR #${pullNumber}.`);
              } catch (error) {
                console.error(`Failed to remove label: ${error.message}`);
              }
            }

            console.log(`Fetching collaborators for repo...`);
            const { data: collaborators } = await github.rest.repos.listCollaborators({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const allowedUsers = collaborators
              .filter(user => user.permissions.push || user.permissions.admin)
              .map(user => user.login);

            if (!allowedUsers.includes(prUser)) {
              core.setFailed(`User ${prUser} is not authorized to auto-merge.`);
              await removeLabel();
              return;
            }

            console.log(`Checking CI/CD status for PR #${pullNumber}...`);

            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
            });

            const failedChecks = checks.check_runs.some(check => check.conclusion === 'failure');

            if (failedChecks) {
              core.setFailed("Some checks have failed. Merge is blocked.");
              await removeLabel();
              return;
            }

            console.log(`Checking merge conflicts for PR #${pullNumber}...`);

            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pullNumber
            });

            if (pr.mergeable_state !== "clean") {
              core.setFailed(`Merge conflict detected! PR #${pullNumber} requires manual resolution.`);
              await removeLabel();
              return;
            }

            console.log(`Merging PR #${pullNumber} into main via merge commit...`);

            const response = await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pullNumber,
              merge_method: 'merge', 
            });

            if (response.status !== 200) {
              core.setFailed(`Merge failed: ${response.status} - ${response.data.message}`);
              await removeLabel();
            } else {
              console.log(`PR #${pullNumber} merged successfully!`);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
